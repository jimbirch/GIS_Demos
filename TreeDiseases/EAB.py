# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EABDemo
                                 A QGIS plugin
 Simple simulation of the spread of tree diseases for a presentation on
 statistical modeling. Not a real model for actual decision making.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-17
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Jim Burchfield
        email                : jim@jdbirch.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction

from qgis.core import (
  QgsProject,
  QgsApplication,
  QgsDataSourceUri,
  QgsCategorizedSymbolRenderer,
  QgsClassificationRange,
  QgsPointXY,
  QgsExpression,
  QgsField,
  QgsFields,
  QgsFeature,
  QgsFeatureRequest,
  QgsFeatureRenderer,
  QgsGeometry,
  QgsGraduatedSymbolRenderer,
  QgsMarkerSymbol,
  QgsMessageLog,
  QgsRectangle,
  QgsRendererCategory,
  QgsRendererRange,
  QgsSymbol,
  QgsVectorDataProvider,
  QgsVectorLayer,
  QgsVectorFileWriter,
  QgsWkbTypes,
  QgsSpatialIndex,
  QgsVectorLayerUtils
)

import numpy as np

from qgis.core.additions.edit import edit
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .EAB_dockwidget import EABDemoDockWidget
import os.path


class EABDemo:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EABDemo_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&EABDemo')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'EABDemo')
        self.toolbar.setObjectName(u'EABDemo')
        self.layers = "empt"

        #print "** INITIALIZING EABDemo"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('EABDemo', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/EABorer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'EABDemo'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING EABDemo"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD EABDemo"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&EABDemo'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def nextYear(self):
        # Takes a points layer and updates it for one year of progression of
        # the tree disease
        
        # Get the layer that the user is selecting
        layerSelIn = self.dockwidget.LayerSelect.currentIndex()
        layer = self.layers[layerSelIn].layer()
        
        # Get the features of the layer and create a spatial index
        features = layer.getFeatures()
        index = QgsSpatialIndex(features)
        
        # Start editing the layer in an edit buffer
        layer.startEditing()
        
        # Loop through each feature, determine whether the tree at the location
        # gets infected or dies
        features = layer.getFeatures()
        for feature in features:
            fid = feature.id()
            
            # Is the tree healthy (status == 0)? Lets see if it stays that way.
            if feature['status'] == 0:
            
                # Loop through the ten nearest trees within 1 km
                neighbours = index.nearestNeighbor(feature.geometry(), 10, 1000)
                for neighbour in neighbours:
                    request = QgsFeatureRequest().setFilterFid(neighbour)
                    for ofeature in layer.getFeatures(request):
                    
                        # If the nearby tree is infected, 20% our tree gets
                        # infected this year. The same happens for each of
                        # up to ten trees within 1 km.
                        if ofeature['status'] == 1:
                            sick = np.random.random() * 100
                            if sick < 20:
                                layer.changeAttributeValue(fid, 1, 1)
                                
            # If the tree at the specified location is sick, determine whether
            # it dies. This is set at a 20% chance.
            elif feature['status'] == 1:
                die = np.random.random() * 100
                if die < 20:
                    layer.changeAttributeValue(fid, 1, 2)
                    
        # Commit changes to the layer
        layer.commitChanges()


    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING EABDemo"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = EABDemoDockWidget()
                
                # Add a signal to the next year button. The user manually
                # advances one year at a time.
                self.dockwidget.Spread.clicked.connect(self.nextYear)
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            self.layers = QgsProject.instance().layerTreeRoot().children()
            self.dockwidget.LayerSelect.clear()
            self.dockwidget.LayerSelect.addItems([layer.name() for layer in self.layers])
            # show the dockwidget

            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
